const Notification = require('./models/notification');
const Usuario = require('./models/usuario');
const Postre = require('./models/postre');
const Ingrediente = require('./models/ingrediente');
const PushNotificationService = require('./services/pushNotificationService');

console.log('üß™ INICIANDO PRUEBAS DEL SISTEMA DE NOTIFICACIONES\n');

async function testNotificationSystem() {
    try {
        // 1. OBTENER USUARIOS DE PRUEBA
        console.log('üë§ 1. Obteniendo usuarios de prueba...');
        const usuarios = await Usuario.getAllUsuarios();
        const admin = usuarios.find(u => u.rol === 'administrador');
        const empleado = usuarios.find(u => u.rol === 'empleado');
        
        if (!admin || !empleado) {
            console.log('‚ùå Error: Se necesitan usuarios administrador y empleado');
            return;
        }
        
        console.log(`   ‚úÖ Admin: ${admin.nombre} (ID: ${admin.id})`);
        console.log(`   ‚úÖ Empleado: ${empleado.nombre} (ID: ${empleado.id})\n`);

        // 2. OBTENER DATOS DE PRUEBA
        console.log('üì¶ 2. Obteniendo datos de prueba...');
        const postres = await Postre.getAllPostres();
        const ingredientes = await Ingrediente.getAllIngredientes();
        
        if (postres.length === 0 || ingredientes.length === 0) {
            console.log('‚ùå Error: Se necesitan postres e ingredientes para probar');
            return;
        }
        
        const postre = postres[0];
        const ingrediente = ingredientes[0];
        
        console.log(`   ‚úÖ Postre de prueba: ${postre.nombre} (ID: ${postre.id})`);
        console.log(`   ‚úÖ Ingrediente de prueba: ${ingrediente.nombre} (ID: ${ingrediente.id})\n`);

        // 3. CREAR SOLICITUD DE ELIMINACI√ìN DE INGREDIENTE
        console.log('üóëÔ∏è 3. Creando solicitud de eliminaci√≥n de ingrediente...');
        const deleteRequestId = await Notification.createDeleteRequest(
            'ingredientes',
            ingrediente.id,
            ingrediente.nombre,
            empleado.id,
            empleado.nombre,
            { motivo: 'Ingrediente vencido' }
        );
        console.log(`   ‚úÖ Solicitud creada con ID: ${deleteRequestId}\n`);

        // 4. CREAR SOLICITUD DE MODIFICACI√ìN DE POSTRE
        console.log('üìù 4. Creando solicitud de modificaci√≥n de postre...');
        const updateRequestId = await Notification.createUpdateRequest(
            'postres',
            postre.id,
            postre.nombre,
            empleado.id,
            empleado.nombre,
            {
                antes: { nombre: postre.nombre },
                despues: { nombre: postre.nombre + ' Deluxe' },
                motivo: 'Mejora del producto'
            }
        );
        console.log(`   ‚úÖ Solicitud creada con ID: ${updateRequestId}\n`);

        // 5. CREAR SOLICITUD PERSONALIZADA
        console.log('üìã 5. Creando solicitud personalizada...');
        const customRequestId = await Notification.createCustomModuleNotification(
            'general',
            'üí° Propuesta de Mejora',
            'Propongo implementar un sistema de descuentos para clientes frecuentes',
            empleado.id,
            empleado.nombre,
            { categoria: 'mejora_sistema', prioridad: 'media' }
        );
        console.log(`   ‚úÖ Solicitud creada con ID: ${customRequestId}\n`);

        // 6. ENVIAR NOTIFICACI√ìN A UN USUARIO ESPEC√çFICO
        console.log('üë• 6. Creando notificaci√≥n para usuario espec√≠fico...');
        const userNotificationId = await Notification.create({
            titulo: 'üéâ Felicitaciones',
            mensaje: `Hola ${empleado.nombre}, excelente trabajo este mes!`,
            tipo: 'info',
            usuario_destinatario_id: empleado.id,
            usuario_solicitante_id: admin.id,
            usuario_solicitante_nombre: admin.nombre,
            modulo: 'general',
            accion: 'felicitacion'
        });
        console.log(`   ‚úÖ Notificaci√≥n creada con ID: ${userNotificationId}\n`);

        // 7. OBTENER NOTIFICACIONES DEL ADMINISTRADOR
        console.log('üîî 7. Obteniendo notificaciones del administrador...');
        const adminNotifications = await Notification.getForUser(admin.id);
        console.log(`   ‚úÖ El administrador tiene ${adminNotifications.length} notificaciones:`);
        adminNotifications.forEach(notif => {
            console.log(`      - ${notif.titulo} (${notif.tipo}, ${notif.estado})`);
        });
        console.log('');

        // 8. OBTENER NOTIFICACIONES DEL EMPLEADO
        console.log('üë®‚Äçüíº 8. Obteniendo notificaciones del empleado...');
        const empleadoNotifications = await Notification.getForUser(empleado.id);
        console.log(`   ‚úÖ El empleado tiene ${empleadoNotifications.length} notificaciones:`);
        empleadoNotifications.forEach(notif => {
            console.log(`      - ${notif.titulo} (${notif.tipo}, ${notif.estado})`);
        });
        console.log('');

        // 9. OBTENER NOTIFICACIONES POR TIPO DE USUARIO
        console.log('üë• 9. Obteniendo notificaciones para administradores...');
        const adminTypeNotifications = await Notification.getForUserType('administrador');
        console.log(`   ‚úÖ Hay ${adminTypeNotifications.length} notificaciones para administradores:`);
        adminTypeNotifications.forEach(notif => {
            console.log(`      - ${notif.titulo} (${notif.tipo}, ${notif.estado})`);
        });
        console.log('');

        // 10. OBTENER ESTAD√çSTICAS
        console.log('üìä 10. Obteniendo estad√≠sticas generales...');
        const stats = await Notification.getStats();
        console.log(`   ‚úÖ Estad√≠sticas del sistema:`);
        console.log(`      - Total de notificaciones: ${stats.total}`);
        console.log(`      - No le√≠das: ${stats.unread}`);
        console.log(`      - Pendientes de aprobaci√≥n: ${stats.pending}`);
        console.log(`      - Aprobadas: ${stats.approved}`);
        console.log(`      - Rechazadas: ${stats.rejected}\n`);

        // 11. OBTENER SOLICITUDES PENDIENTES
        console.log('‚è≥ 11. Obteniendo solicitudes pendientes de aprobaci√≥n...');
        const pendingApprovals = await Notification.getPendingApprovals();
        console.log(`   ‚úÖ Hay ${pendingApprovals.length} solicitudes pendientes:`);
        pendingApprovals.forEach(notif => {
            console.log(`      - ${notif.titulo} (M√≥dulo: ${notif.modulo}, Acci√≥n: ${notif.accion})`);
        });
        console.log('');

        // 12. APROBAR UNA SOLICITUD
        if (pendingApprovals.length > 0) {
            console.log('‚úÖ 12. Aprobando primera solicitud pendiente...');
            const firstPending = pendingApprovals[0];
            await Notification.updateApprovalStatus(
                firstPending.id,
                'aprobada',
                admin.id,
                admin.nombre,
                'Solicitud aprobada por el administrador'
            );
            console.log(`   ‚úÖ Solicitud ${firstPending.id} aprobada\n`);
        }

        // 13. MARCAR NOTIFICACI√ìN COMO LE√çDA
        console.log('üëÄ 13. Marcando notificaci√≥n como le√≠da...');
        if (empleadoNotifications.length > 0) {
            const firstNotif = empleadoNotifications[0];
            await Notification.markAsRead(firstNotif.id);
            console.log(`   ‚úÖ Notificaci√≥n ${firstNotif.id} marcada como le√≠da\n`);
        }

        // 14. PRUEBA DE PUSH NOTIFICATIONS (simulada)
        console.log('üì± 14. Probando notificaciones push...');
        try {
            console.log('   üîÑ Simulando env√≠o de push notification...');
            console.log('   ‚úÖ Push notification enviada exitosamente (simulada)\n');
        } catch (error) {
            console.log(`   ‚ö†Ô∏è Error en push notification: ${error.message}\n`);
        }

        // 15. ESTAD√çSTICAS FINALES
        console.log('üìà 15. Estad√≠sticas finales del sistema...');
        const finalStats = await Notification.getStats();
        console.log(`   ‚úÖ Estad√≠sticas actualizadas:`);
        console.log(`      - Total de notificaciones: ${finalStats.total}`);
        console.log(`      - No le√≠das: ${finalStats.unread}`);
        console.log(`      - Pendientes de aprobaci√≥n: ${finalStats.pending}`);
        console.log(`      - Aprobadas: ${finalStats.approved}`);
        console.log(`      - Rechazadas: ${finalStats.rejected}\n`);

        console.log('üéâ ¬°TODAS LAS PRUEBAS DEL SISTEMA DE NOTIFICACIONES COMPLETADAS EXITOSAMENTE! üéâ\n');
        
        console.log('üìã RESUMEN DE FUNCIONALIDADES PROBADAS:');
        console.log('   ‚úÖ Creaci√≥n de solicitudes de eliminaci√≥n');
        console.log('   ‚úÖ Creaci√≥n de solicitudes de modificaci√≥n');
        console.log('   ‚úÖ Creaci√≥n de solicitudes personalizadas');
        console.log('   ‚úÖ Notificaciones para usuarios espec√≠ficos');
        console.log('   ‚úÖ Notificaciones por tipo de usuario');
        console.log('   ‚úÖ Sistema de aprobaciones');
        console.log('   ‚úÖ Marcado como le√≠da');
        console.log('   ‚úÖ Estad√≠sticas del sistema');
        console.log('   ‚úÖ Gesti√≥n de solicitudes pendientes');
        console.log('   ‚úÖ Push notifications (simuladas)');

    } catch (error) {
        console.error('‚ùå Error durante las pruebas:', error);
        console.error('Stack trace:', error.stack);
    }
}

// Ejecutar las pruebas
testNotificationSystem(); 