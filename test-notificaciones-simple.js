const axios = require('axios');

const API_BASE_URL = 'http://localhost:3000';

// Configuraci√≥n de usuario de prueba
const testUser = {
    email: 'empleado.test@pasteleria.com',
    password: 'test123'
};

let authToken = null;

async function login() {
    try {
        console.log('üîê Iniciando sesi√≥n...');
        const response = await axios.post(`${API_BASE_URL}/auth/login`, testUser);
        authToken = response.data.token;
        console.log('‚úÖ Sesi√≥n iniciada correctamente');
        console.log(`üë§ Usuario: ${response.data.usuario.nombre} (${response.data.usuario.rol})`);
        return true;
    } catch (error) {
        console.log('‚ùå Error al iniciar sesi√≥n:', error.response?.data?.error || error.message);
        return false;
    }
}

async function makeAuthenticatedRequest(method, url, data = null) {
    const config = {
        method,
        url: `${API_BASE_URL}${url}`,
        headers: {
            'Authorization': `Bearer ${authToken}`,
            'Content-Type': 'application/json'
        }
    };
    
    if (data) {
        config.data = data;
    }
    
    return axios(config);
}

async function testNotificacionesSimple() {
    console.log('üß™ PRUEBA SIMPLE DE NOTIFICACIONES CRUD');
    console.log('=' .repeat(50));
    
    // 1. Iniciar sesi√≥n
    const loginSuccess = await login();
    if (!loginSuccess) {
        console.log('‚ùå No se puede continuar sin autenticaci√≥n');
        return;
    }
    
    // 2. Verificar tokens disponibles
    console.log('\nüì± Verificando tokens de push disponibles...');
    try {
        const Usuario = require('./models/usuario');
        const tokens = await Usuario.getAdminPushTokens();
        console.log(`üìä Tokens disponibles: ${tokens.length}`);
        
        if (tokens.length === 0) {
            console.log('‚ö†Ô∏è  No hay tokens de push registrados');
            console.log('üí° Las notificaciones no llegar√°n a ning√∫n dispositivo');
            console.log('üí° Pero el sistema funcionar√° correctamente');
        } else {
            console.log('‚úÖ Hay tokens disponibles - las notificaciones deber√≠an llegar');
        }
    } catch (error) {
        console.log('‚ùå Error verificando tokens:', error.message);
    }
    
    let notificacionesEnviadas = 0;
    
    try {
        // 3. Crear ingrediente
        console.log('\n1Ô∏è‚É£  CREANDO INGREDIENTE...');
        const nuevoIngrediente = await makeAuthenticatedRequest('POST', '/ingredientes', {
            nombreIngrediente: 'Vainilla Premium',
            existencias: 15
        });
        console.log('‚úÖ Ingrediente creado exitosamente');
        console.log('üì§ Notificaci√≥n enviada a administradores');
        notificacionesEnviadas++;
        
        // 4. Crear postre
        console.log('\n2Ô∏è‚É£  CREANDO POSTRE...');
        const nuevoPostre = await makeAuthenticatedRequest('POST', '/postres', {
            nombrePostre: 'Flan de Vainilla'
        });
        console.log('‚úÖ Postre creado exitosamente');
        console.log('üì§ Notificaci√≥n enviada a administradores');
        notificacionesEnviadas++;
        
        // 5. Actualizar ingrediente
        console.log('\n3Ô∏è‚É£  ACTUALIZANDO INGREDIENTE...');
        const ingredienteActualizado = await makeAuthenticatedRequest('PUT', `/ingredientes/${nuevoIngrediente.data.idIngrediente}`, {
            nombreIngrediente: 'Vainilla Premium Actualizada',
            existencias: 20
        });
        console.log('‚úÖ Ingrediente actualizado exitosamente');
        console.log('üì§ Notificaci√≥n enviada a administradores');
        notificacionesEnviadas++;
        
        // 6. Actualizar postre
        console.log('\n4Ô∏è‚É£  ACTUALIZANDO POSTRE...');
        const postreActualizado = await makeAuthenticatedRequest('PUT', `/postres/${nuevoPostre.data.idPostre}`, {
            nombrePostre: 'Flan de Vainilla Premium'
        });
        console.log('‚úÖ Postre actualizado exitosamente');
        console.log('üì§ Notificaci√≥n enviada a administradores');
        notificacionesEnviadas++;
        
        // 7. Eliminar postre
        console.log('\n5Ô∏è‚É£  ELIMINANDO POSTRE...');
        const postreEliminado = await makeAuthenticatedRequest('DELETE', `/postres/${nuevoPostre.data.idPostre}`);
        console.log('‚úÖ Postre eliminado exitosamente');
        console.log('üì§ Notificaci√≥n enviada a administradores');
        notificacionesEnviadas++;
        
        // 8. Eliminar ingrediente
        console.log('\n6Ô∏è‚É£  ELIMINANDO INGREDIENTE...');
        const ingredienteEliminado = await makeAuthenticatedRequest('DELETE', `/ingredientes/${nuevoIngrediente.data.idIngrediente}`);
        console.log('‚úÖ Ingrediente eliminado exitosamente');
        console.log('üì§ Notificaci√≥n enviada a administradores');
        notificacionesEnviadas++;
        
        console.log('\n' + '=' .repeat(50));
        console.log('üéâ PRUEBA COMPLETADA EXITOSAMENTE');
        console.log(`üì± ${notificacionesEnviadas} notificaciones enviadas a administradores`);
        console.log('‚úÖ Todas las operaciones CRUD funcionan correctamente');
        console.log('‚úÖ Las notificaciones se env√≠an autom√°ticamente');
        console.log('');
        console.log('üìã OPERACIONES PROBADAS:');
        console.log('   ‚úÖ Crear ingrediente ‚Üí Notificaci√≥n enviada');
        console.log('   ‚úÖ Crear postre ‚Üí Notificaci√≥n enviada');
        console.log('   ‚úÖ Actualizar ingrediente ‚Üí Notificaci√≥n enviada');
        console.log('   ‚úÖ Actualizar postre ‚Üí Notificaci√≥n enviada');
        console.log('   ‚úÖ Eliminar postre ‚Üí Notificaci√≥n enviada');
        console.log('   ‚úÖ Eliminar ingrediente ‚Üí Notificaci√≥n enviada');
        console.log('');
        console.log('üí° PR√ìXIMO PASO: Verifica tu dispositivo m√≥vil');
        console.log('   Si tienes un token v√°lido, deber√≠as haber recibido las notificaciones');
        
    } catch (error) {
        console.error('\n‚ùå Error durante la prueba:', error.response?.data || error.message);
        console.log(`üì± Notificaciones enviadas hasta el error: ${notificacionesEnviadas}`);
        
        if (error.response?.status === 401) {
            console.log('üîê Error de autenticaci√≥n - Token inv√°lido o expirado');
        } else if (error.response?.status === 403) {
            console.log('üö´ Error de autorizaci√≥n - Permisos insuficientes');
        }
    }
}

async function main() {
    console.log('üöÄ INICIANDO PRUEBA SIMPLE DE NOTIFICACIONES CRUD');
    console.log('=' .repeat(60));
    console.log('üéØ OBJETIVO: Verificar que las notificaciones se env√≠en autom√°ticamente');
    console.log('üì± CUANDO: Un empleado realiza operaciones CRUD');
    console.log('üë• PARA: Administradores con tokens de push v√°lidos');
    console.log('');
    
    await testNotificacionesSimple();
}

// Ejecutar prueba
main().catch(console.error); 