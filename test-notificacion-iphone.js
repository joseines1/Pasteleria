const axios = require('axios');

async function enviarNotificacionPruebaDirecta() {
    console.log('üß™ TEST DIRECTO DE NOTIFICACI√ìN PARA iPHONE\n');
    
    try {
        // 1. Obtener tokens de administradores
        console.log('1Ô∏è‚É£ Obteniendo tokens de administradores...');
        
        const adminLogin = await axios.post('http://localhost:3000/auth/login', {
            email: 'admin@test.com',
            password: 'admin123'
        });
        
        if (!adminLogin.data.usuario.pushToken) {
            console.log('‚ùå ADMINISTRADOR NO TIENE TOKEN PUSH');
            console.log('üì± SOLUCI√ìN: El admin debe loguearse en la app m√≥vil iPhone');
            console.log('üîî Y PERMITIR notificaciones cuando se solicite');
            return;
        }
        
        const adminToken = adminLogin.data.usuario.pushToken;
        console.log(`‚úÖ Token admin encontrado: ${adminToken.substring(0, 20)}...`);
        
        // 2. Enviar notificaci√≥n directa usando Expo API
        console.log('\n2Ô∏è‚É£ Enviando notificaci√≥n de prueba directa...');
        
        const notificationData = {
            to: adminToken,
            title: 'üß™ TEST iPhone Notificaci√≥n',
            body: '¬°Esta es una prueba directa para iPhone!',
            data: {
                tipo: 'test',
                timestamp: new Date().toISOString()
            },
            sound: 'default',
            badge: 1,
            priority: 'high'
        };
        
        const expoResponse = await axios.post('https://exp.host/--/api/v2/push/send', notificationData, {
            headers: {
                'Accept': 'application/json',
                'Accept-Encoding': 'gzip, deflate',
                'Content-Type': 'application/json'
            }
        });
        
        console.log('üì§ Respuesta de Expo:', expoResponse.data);
        
        if (expoResponse.data.data && expoResponse.data.data[0] && expoResponse.data.data[0].status === 'ok') {
            console.log('\n‚úÖ NOTIFICACI√ìN ENVIADA EXITOSAMENTE');
            console.log('üì± Revisa el iPhone administrador AHORA');
            console.log('‚è∞ La notificaci√≥n deber√≠a aparecer en 5-10 segundos');
            console.log('');
            console.log('üîç Si NO recibiste la notificaci√≥n:');
            console.log('1. üì± Verificar Ajustes > Notificaciones > Expo Go');
            console.log('2. üîá Verificar que "No molestar" est√© DESACTIVADO');
            console.log('3. üè† Verificar que la app est√© en segundo plano');
            console.log('4. üì∂ Verificar conexi√≥n WiFi');
        } else {
            console.log('\n‚ùå ERROR AL ENVIAR NOTIFICACI√ìN');
            console.log('Respuesta:', expoResponse.data);
            
            if (expoResponse.data.data && expoResponse.data.data[0] && expoResponse.data.data[0].details) {
                console.log('Detalles del error:', expoResponse.data.data[0].details);
                
                if (expoResponse.data.data[0].details.error === 'DeviceNotRegistered') {
                    console.log('\nüîß SOLUCI√ìN:');
                    console.log('1. El token no es v√°lido o expir√≥');
                    console.log('2. Reinstalar Expo Go en el iPhone');
                    console.log('3. Volver a hacer login en la app');
                    console.log('4. Permitir notificaciones nuevamente');
                }
            }
        }
        
        // 3. Tambi√©n probar con el m√©todo interno del servidor
        console.log('\n3Ô∏è‚É£ Probando notificaci√≥n usando m√©todo interno del servidor...');
        
        const empleadoLogin = await axios.post('http://localhost:3000/auth/login', {
            email: 'empleado@test.com',
            password: 'emp123'
        });
        
        if (empleadoLogin.data.token) {
            try {
                const ingrediente = await axios.post('http://localhost:3000/ingredientes', {
                    nombre: 'Test iPhone Notif Server',
                    cantidad: 1,
                    unidad: 'test'
                }, {
                    headers: {
                        'Authorization': `Bearer ${empleadoLogin.data.token}`,
                        'Content-Type': 'application/json'
                    }
                });
                
                if (ingrediente.data.success) {
                    console.log('‚úÖ Ingrediente creado via servidor - Notificaci√≥n enviada');
                    console.log('üì± Tambi√©n revisa si lleg√≥ esta segunda notificaci√≥n');
                    
                    // Limpiar despu√©s de 3 segundos
                    setTimeout(async () => {
                        try {
                            await axios.delete(`http://localhost:3000/ingredientes/${ingrediente.data.idIngrediente}`, {
                                headers: { 'Authorization': `Bearer ${empleadoLogin.data.token}` }
                            });
                            console.log('üßπ Ingrediente de prueba eliminado');
                        } catch (e) {
                            console.log('‚ÑπÔ∏è  Ingrediente ya eliminado o error limpiando');
                        }
                    }, 3000);
                }
            } catch (error) {
                console.log('‚ùå Error creando ingrediente para prueba interna');
            }
        }
        
    } catch (error) {
        console.error('‚ùå Error en test:', error.message);
        if (error.response) {
            console.error('Detalles:', error.response.data);
        }
    }
}

enviarNotificacionPruebaDirecta(); 