const PushNotificationService = require('./services/pushNotificationService');
const Usuario = require('./models/usuario');

async function testNotificationsAfterFix() {
    console.log('üîç VERIFICANDO SISTEMA DE NOTIFICACIONES DESPU√âS DE LA LIMPIEZA');
    console.log('=' .repeat(60));
    
    try {
        // 1. Verificar tokens actuales
        console.log('\n1Ô∏è‚É£  VERIFICANDO TOKENS ACTUALES...');
        const userTokens = await Usuario.getAdminPushTokens();
        console.log(`üìä Total de tokens en BD: ${userTokens.length}`);
        
        if (userTokens.length === 0) {
            console.log('‚ö†Ô∏è  NO HAY TOKENS REGISTRADOS');
            console.log('');
            console.log('üì± INSTRUCCIONES PARA USUARIOS:');
            console.log('   1. Abrir la app m√≥vil');
            console.log('   2. Cerrar sesi√≥n si ya est√° logueado');
            console.log('   3. Iniciar sesi√≥n nuevamente');
            console.log('   4. Permitir notificaciones cuando se solicite');
            console.log('   5. El token se generar√° autom√°ticamente');
            console.log('');
            return;
        }
        
        // 2. Limpiar tokens inv√°lidos
        console.log('\n2Ô∏è‚É£  LIMPIANDO TOKENS INV√ÅLIDOS...');
        const cleanResult = await PushNotificationService.cleanInvalidTokens();
        
        // 3. Enviar notificaci√≥n de prueba
        console.log('\n3Ô∏è‚É£  ENVIANDO NOTIFICACI√ìN DE PRUEBA...');
        const testResult = await PushNotificationService.sendCustomNotification(
            'üß™ Prueba del Sistema',
            'Esta es una notificaci√≥n de prueba despu√©s de la limpieza de tokens',
            'test',
            { testId: Date.now() }
        );
        
        // 4. Mostrar resultados
        console.log('\nüìä RESULTADOS DE LA PRUEBA:');
        console.log(`   ‚úÖ Enviadas exitosamente: ${testResult.sent}`);
        console.log(`   ‚ùå Con errores: ${testResult.errors}`);
        console.log(`   üì± Total de tokens v√°lidos: ${testResult.totalTokens || 0}`);
        
        if (testResult.sent > 0) {
            console.log('\nüéâ ¬°SISTEMA DE NOTIFICACIONES FUNCIONANDO CORRECTAMENTE!');
            console.log('   Las notificaciones deber√≠an aparecer en los dispositivos m√≥viles');
        } else {
            console.log('\n‚ö†Ô∏è  SISTEMA NECESITA ATENCI√ìN:');
            if (testResult.message) {
                console.log(`   Mensaje: ${testResult.message}`);
            }
            console.log('   Los usuarios necesitan regenerar sus tokens de notificaci√≥n');
        }
        
        // 5. Probar notificaciones CRUD
        if (testResult.sent > 0) {
            console.log('\n4Ô∏è‚É£  PROBANDO NOTIFICACIONES CRUD...');
            
            // Simular creaci√≥n de ingrediente
            const ingredienteResult = await PushNotificationService.notifyIngredienteCreated(
                { id: 999, nombre: 'Ingrediente de Prueba' },
                'Sistema de Prueba'
            );
            
            // Simular actualizaci√≥n de postre
            const postreResult = await PushNotificationService.notifyPostreUpdated(
                { id: 888, nombre: 'Postre de Prueba' },
                'Sistema de Prueba'
            );
            
            console.log(`   üì¶ Notificaci√≥n ingrediente: ${ingredienteResult.sent} enviadas`);
            console.log(`   üç∞ Notificaci√≥n postre: ${postreResult.sent} enviadas`);
        }
        
        console.log('\n' + '=' .repeat(60));
        console.log('‚úÖ VERIFICACI√ìN COMPLETADA');
        
    } catch (error) {
        console.error('‚ùå Error durante la verificaci√≥n:', error);
    }
}

// Ejecutar la prueba
testNotificationsAfterFix(); 