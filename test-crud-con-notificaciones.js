const axios = require('axios');

const API_BASE_URL = 'http://localhost:3000';

// Configuraci√≥n de usuario de prueba (actualizado con credenciales conocidas)
const testUser = {
    email: 'empleado.test@pasteleria.com',
    password: 'test123'
};

let authToken = null;

async function login() {
    try {
        console.log('üîê Iniciando sesi√≥n...');
        const response = await axios.post(`${API_BASE_URL}/auth/login`, testUser);
        authToken = response.data.token;
        console.log('‚úÖ Sesi√≥n iniciada correctamente');
        console.log(`üë§ Usuario: ${response.data.user.nombre} (${response.data.user.rol})`);
        return true;
    } catch (error) {
        console.log('‚ùå Error al iniciar sesi√≥n:', error.response?.data?.error || error.message);
        console.log('üí° Aseg√∫rate de que existe un usuario con email: empleado.test@pasteleria.com');
        return false;
    }
}

async function makeAuthenticatedRequest(method, url, data = null) {
    const config = {
        method,
        url: `${API_BASE_URL}${url}`,
        headers: {
            'Authorization': `Bearer ${authToken}`,
            'Content-Type': 'application/json'
        }
    };
    
    if (data) {
        config.data = data;
    }
    
    return axios(config);
}

async function testCRUDNotifications() {
    console.log('üß™ PRUEBA DE NOTIFICACIONES CRUD');
    console.log('=' .repeat(50));
    
    // 1. Iniciar sesi√≥n
    const loginSuccess = await login();
    if (!loginSuccess) {
        console.log('‚ùå No se puede continuar sin autenticaci√≥n');
        return;
    }
    
    console.log('\nüì± Verificando tokens de push disponibles...');
    try {
        const Usuario = require('./models/usuario');
        const tokens = await Usuario.getAdminPushTokens();
        console.log(`üìä Tokens disponibles: ${tokens.length}`);
        
        if (tokens.length === 0) {
            console.log('‚ö†Ô∏è  No hay tokens de push registrados');
            console.log('üí° Aseg√∫rate de que al menos un administrador tenga un token v√°lido');
            console.log('üí° Ejecuta: node solucion-notificaciones-movil.js para m√°s informaci√≥n');
        }
    } catch (error) {
        console.log('‚ùå Error verificando tokens:', error.message);
    }
    
    try {
        // 2. Crear ingrediente (deber√≠a enviar notificaci√≥n)
        console.log('\n1Ô∏è‚É£  CREANDO INGREDIENTE...');
        const nuevoIngrediente = await makeAuthenticatedRequest('POST', '/ingredientes', {
            nombreIngrediente: 'Chocolate Premium Test',
            existencias: 25
        });
        console.log('‚úÖ Ingrediente creado:', nuevoIngrediente.data);
        console.log('üì§ Notificaci√≥n enviada a administradores');
        
        // 3. Actualizar ingrediente (deber√≠a enviar notificaci√≥n)
        console.log('\n2Ô∏è‚É£  ACTUALIZANDO INGREDIENTE...');
        const ingredienteActualizado = await makeAuthenticatedRequest('PUT', `/ingredientes/${nuevoIngrediente.data.idIngrediente}`, {
            nombreIngrediente: 'Chocolate Premium Actualizado',
            existencias: 30
        });
        console.log('‚úÖ Ingrediente actualizado:', ingredienteActualizado.data);
        console.log('üì§ Notificaci√≥n enviada a administradores');
        
        // 4. Crear postre (deber√≠a enviar notificaci√≥n)
        console.log('\n3Ô∏è‚É£  CREANDO POSTRE...');
        const nuevoPostre = await makeAuthenticatedRequest('POST', '/postres', {
            nombrePostre: 'Torta de Chocolate Test'
        });
        console.log('‚úÖ Postre creado:', nuevoPostre.data);
        console.log('üì§ Notificaci√≥n enviada a administradores');
        
        // 5. Crear relaci√≥n postre-ingrediente (deber√≠a enviar notificaci√≥n)
        console.log('\n4Ô∏è‚É£  CREANDO RECETA...');
        const nuevaReceta = await makeAuthenticatedRequest('POST', '/postres-ingredientes', {
            idPostre: nuevoPostre.data.idPostre,
            idIngrediente: nuevoIngrediente.data.idIngrediente,
            Cantidad: 2.5
        });
        console.log('‚úÖ Receta creada:', nuevaReceta.data);
        console.log('üì§ Notificaci√≥n enviada a administradores');
        
        // 6. Actualizar receta (deber√≠a enviar notificaci√≥n)
        console.log('\n5Ô∏è‚É£  ACTUALIZANDO RECETA...');
        const recetaActualizada = await makeAuthenticatedRequest('PUT', `/postres-ingredientes/${nuevaReceta.data.id}`, {
            idPostre: nuevoPostre.data.idPostre,
            idIngrediente: nuevoIngrediente.data.idIngrediente,
            Cantidad: 3.0
        });
        console.log('‚úÖ Receta actualizada:', recetaActualizada.data);
        console.log('üì§ Notificaci√≥n enviada a administradores');
        
        // 7. Eliminar receta (deber√≠a enviar notificaci√≥n)
        console.log('\n6Ô∏è‚É£  ELIMINANDO RECETA...');
        const recetaEliminada = await makeAuthenticatedRequest('DELETE', `/postres-ingredientes/${nuevaReceta.data.id}`);
        console.log('‚úÖ Receta eliminada:', recetaEliminada.data);
        console.log('üì§ Notificaci√≥n enviada a administradores');
        
        // 8. Eliminar postre (deber√≠a enviar notificaci√≥n)
        console.log('\n7Ô∏è‚É£  ELIMINANDO POSTRE...');
        const postreEliminado = await makeAuthenticatedRequest('DELETE', `/postres/${nuevoPostre.data.idPostre}`);
        console.log('‚úÖ Postre eliminado:', postreEliminado.data);
        console.log('üì§ Notificaci√≥n enviada a administradores');
        
        // 9. Eliminar ingrediente (deber√≠a enviar notificaci√≥n)
        console.log('\n8Ô∏è‚É£  ELIMINANDO INGREDIENTE...');
        const ingredienteEliminado = await makeAuthenticatedRequest('DELETE', `/ingredientes/${nuevoIngrediente.data.idIngrediente}`);
        console.log('‚úÖ Ingrediente eliminado:', ingredienteEliminado.data);
        console.log('üì§ Notificaci√≥n enviada a administradores');
        
        console.log('\n' + '=' .repeat(50));
        console.log('üéâ PRUEBA COMPLETADA EXITOSAMENTE');
        console.log('‚úÖ Todas las operaciones CRUD ejecutadas');
        console.log('üì± 8 notificaciones enviadas a administradores');
        console.log('üí° Verifica tu dispositivo m√≥vil para confirmar la recepci√≥n');
        
    } catch (error) {
        console.error('\n‚ùå Error durante la prueba:', error.response?.data || error.message);
        
        if (error.response?.status === 401) {
            console.log('üîê Error de autenticaci√≥n - Token inv√°lido o expirado');
        } else if (error.response?.status === 403) {
            console.log('üö´ Error de autorizaci√≥n - Permisos insuficientes');
        }
    }
}

// Funci√≥n para crear usuario de prueba si no existe
async function createTestUser() {
    try {
        console.log('üë§ Creando usuario de prueba...');
        await axios.post(`${API_BASE_URL}/auth/register`, {
            nombre: 'Usuario Test',
            email: testUser.email,
            password: testUser.password,
            rol: 'empleado'
        });
        console.log('‚úÖ Usuario de prueba creado');
    } catch (error) {
        if (error.response?.status === 400 && error.response?.data?.error?.includes('ya existe')) {
            console.log('‚ÑπÔ∏è  Usuario de prueba ya existe');
        } else {
            console.log('‚ùå Error creando usuario de prueba:', error.response?.data?.error || error.message);
        }
    }
}

async function main() {
    console.log('üöÄ INICIANDO PRUEBA DE NOTIFICACIONES CRUD CON AUTENTICACI√ìN');
    console.log('=' .repeat(60));
    
    // Crear usuario de prueba si no existe
    await createTestUser();
    
    // Ejecutar pruebas
    await testCRUDNotifications();
}

// Ejecutar prueba
main().catch(console.error); 