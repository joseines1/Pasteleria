const { sendPushNotification, isValidPushToken } = require('../config/firebase');
const Usuario = require('../models/usuario');

// Funci√≥n para enviar notificaci√≥n a administradores
async function enviarNotificacionAdministradores(titulo, mensaje, datos = {}) {
    try {
        console.log(`üì¢ Preparando notificaci√≥n para administradores: ${titulo}`);
        
        // Obtener todos los administradores con tokens push
        const administradores = await Usuario.getAdministradoresConTokens();
        
        if (!administradores || administradores.length === 0) {
            console.log('‚ö†Ô∏è No hay administradores con tokens push registrados');
            return { success: false, message: 'No hay administradores con tokens' };
        }
        
        // Filtrar tokens v√°lidos
        const tokensValidos = administradores
            .map(admin => admin.pushToken)
            .filter(token => isValidPushToken(token));
        
        if (tokensValidos.length === 0) {
            console.log('‚ö†Ô∏è No hay tokens push v√°lidos');
            return { success: false, message: 'No hay tokens v√°lidos' };
        }
        
        console.log(`üì± Enviando a ${tokensValidos.length} administradores`);
        
        // Enviar notificaci√≥n usando Firebase/Expo
        const resultado = await sendPushNotification(
            tokensValidos,
            titulo,
            mensaje,
            {
                tipo: 'admin_notification',
                ...datos
            }
        );
        
        console.log('‚úÖ Notificaci√≥n enviada exitosamente');
        return { 
            success: true, 
            message: 'Notificaci√≥n enviada', 
            tokensEnviados: tokensValidos.length,
            resultado 
        };
        
    } catch (error) {
        console.error('‚ùå Error enviando notificaci√≥n a administradores:', error.message);
        return { success: false, message: error.message };
    }
}

// Funci√≥n para enviar notificaci√≥n a un usuario espec√≠fico
async function enviarNotificacionUsuario(userId, titulo, mensaje, datos = {}) {
    try {
        const usuario = await Usuario.getUsuarioById(userId);
        
        if (!usuario || !usuario.pushToken) {
            console.log(`‚ö†Ô∏è Usuario ${userId} no tiene token push`);
            return { success: false, message: 'Usuario sin token push' };
        }
        
        if (!isValidPushToken(usuario.pushToken)) {
            console.log(`‚ö†Ô∏è Token inv√°lido para usuario ${userId}`);
            return { success: false, message: 'Token inv√°lido' };
        }
        
        const resultado = await sendPushNotification(
            [usuario.pushToken],
            titulo,
            mensaje,
            {
                tipo: 'user_notification',
                userId: userId,
                ...datos
            }
        );
        
        console.log(`‚úÖ Notificaci√≥n enviada a usuario ${usuario.nombre}`);
        return { success: true, message: 'Notificaci√≥n enviada', resultado };
        
    } catch (error) {
        console.error(`‚ùå Error enviando notificaci√≥n a usuario ${userId}:`, error.message);
        return { success: false, message: error.message };
    }
}

// Funciones espec√≠ficas para operaciones CRUD
async function notificarIngresoIngrediente(nombreIngrediente, cantidad, unidad) {
    return await enviarNotificacionAdministradores(
        'ü•Ñ Nuevo Ingrediente',
        `Se agreg√≥: ${nombreIngrediente} (${cantidad} ${unidad})`,
        { 
            accion: 'crear_ingrediente', 
            ingrediente: nombreIngrediente,
            cantidad,
            unidad
        }
    );
}

async function notificarActualizacionIngrediente(nombreIngrediente, nuevaCantidad, unidad) {
    return await enviarNotificacionAdministradores(
        'üìù Ingrediente Actualizado',
        `${nombreIngrediente} actualizado a ${nuevaCantidad} ${unidad}`,
        { 
            accion: 'actualizar_ingrediente', 
            ingrediente: nombreIngrediente,
            cantidad: nuevaCantidad,
            unidad
        }
    );
}

async function notificarEliminacionIngrediente(nombreIngrediente) {
    return await enviarNotificacionAdministradores(
        'üóëÔ∏è Ingrediente Eliminado',
        `Se elimin√≥: ${nombreIngrediente}`,
        { 
            accion: 'eliminar_ingrediente', 
            ingrediente: nombreIngrediente 
        }
    );
}

async function notificarIngresoPostre(nombrePostre, precio) {
    return await enviarNotificacionAdministradores(
        'üßÅ Nuevo Postre',
        `Se agreg√≥: ${nombrePostre} - $${precio}`,
        { 
            accion: 'crear_postre', 
            postre: nombrePostre,
            precio
        }
    );
}

async function notificarActualizacionPostre(nombrePostre, nuevoPrecio) {
    return await enviarNotificacionAdministradores(
        'üìù Postre Actualizado',
        `${nombrePostre} actualizado - $${nuevoPrecio}`,
        { 
            accion: 'actualizar_postre', 
            postre: nombrePostre,
            precio: nuevoPrecio
        }
    );
}

async function notificarEliminacionPostre(nombrePostre) {
    return await enviarNotificacionAdministradores(
        'üóëÔ∏è Postre Eliminado',
        `Se elimin√≥: ${nombrePostre}`,
        { 
            accion: 'eliminar_postre', 
            postre: nombrePostre 
        }
    );
}

async function notificarRecetaCreada(nombrePostre, ingredientes) {
    return await enviarNotificacionAdministradores(
        'üìã Nueva Receta',
        `Receta creada para: ${nombrePostre}`,
        { 
            accion: 'crear_receta', 
            postre: nombrePostre,
            ingredientes: ingredientes.length
        }
    );
}

// Funci√≥n para probar notificaciones
async function probarNotificacion() {
    console.log('üß™ Probando sistema de notificaciones...');
    
    const resultado = await enviarNotificacionAdministradores(
        'üß™ Prueba de Sistema',
        'Esta es una notificaci√≥n de prueba del sistema de pasteler√≠a',
        { 
            tipo: 'test',
            timestamp: new Date().toISOString()
        }
    );
    
    return resultado;
}

module.exports = {
    enviarNotificacionAdministradores,
    enviarNotificacionUsuario,
    notificarIngresoIngrediente,
    notificarActualizacionIngrediente,
    notificarEliminacionIngrediente,
    notificarIngresoPostre,
    notificarActualizacionPostre,
    notificarEliminacionPostre,
    notificarRecetaCreada,
    probarNotificacion
}; 