const { notificationService } = require('./src/services/notificationService');

// Script para probar las notificaciones de empleados
async function testEmployeeNotifications() {
  console.log('üß™ === PROBANDO NOTIFICACIONES DE EMPLEADOS ===\n');

  try {
    // Simular usuario empleado
    const empleado = {
      id: 2,
      nombre: 'Juan P√©rez',
      email: 'juan.empleado@pasteleria.com',
      rol: 'empleado'
    };

    // Simular usuario administrador
    const admin = {
      id: 1,
      nombre: 'Mar√≠a Garc√≠a',
      email: 'admin@pasteleria.com',
      rol: 'administrador'
    };

    console.log('üë§ Usuario empleado simulado:', empleado.nombre);
    console.log('üëë Usuario administrador simulado:', admin.nombre);
    console.log('');

    // 1. Inicializar servicio para empleado
    console.log('1Ô∏è‚É£ Inicializando servicio para empleado...');
    const employeeService = await notificationService.initialize(empleado);
    console.log('   Estado:', employeeService.success ? '‚úÖ OK' : '‚ùå ERROR');
    console.log('   Modo:', employeeService.mode);
    console.log('');

    // 2. Probar notificaci√≥n de nuevo postre
    console.log('2Ô∏è‚É£ Probando notificaci√≥n: Nuevo postre creado...');
    const postreNotification = await notificationService.sendCustomNotification({
      title: 'üßÅ Nuevo Postre Creado',
      message: `${empleado.nombre} cre√≥ el postre "Pastel de Chocolate Especial"`,
      module: 'postres',
      data: {
        action: 'create',
        postre: 'Pastel de Chocolate Especial',
        usuario: empleado.nombre,
        rol: empleado.rol
      }
    }, empleado.nombre);
    
    console.log('   Resultado:', postreNotification.success ? '‚úÖ Enviada' : '‚ùå Error');
    console.log('');

    // 3. Probar notificaci√≥n de ingrediente actualizado
    console.log('3Ô∏è‚É£ Probando notificaci√≥n: Ingrediente actualizado...');
    const ingredienteNotification = await notificationService.sendCustomNotification({
      title: 'üìù Ingrediente Actualizado',
      message: `${empleado.nombre} actualiz√≥ Harina de Trigo - Stock: 15 kg`,
      module: 'ingredientes',
      data: {
        action: 'update',
        ingrediente: 'Harina de Trigo',
        stock: 15,
        unidad: 'kg',
        usuario: empleado.nombre,
        rol: empleado.rol
      }
    }, empleado.nombre);
    
    console.log('   Resultado:', ingredienteNotification.success ? '‚úÖ Enviada' : '‚ùå Error');
    console.log('');

    // 4. Probar notificaci√≥n de nueva receta
    console.log('4Ô∏è‚É£ Probando notificaci√≥n: Nueva receta creada...');
    const recetaNotification = await notificationService.sendCustomNotification({
      title: 'üìã Nueva Receta Creada',
      message: `${empleado.nombre} cre√≥ una nueva receta: "Tarta de Frutas" con Harina de Trigo (500g)`,
      module: 'recetas',
      data: {
        action: 'create',
        postre: 'Tarta de Frutas',
        ingrediente: 'Harina de Trigo',
        cantidad: 500,
        usuario: empleado.nombre,
        rol: empleado.rol
      }
    }, empleado.nombre);
    
    console.log('   Resultado:', recetaNotification.success ? '‚úÖ Enviada' : '‚ùå Error');
    console.log('');

    // 5. Probar notificaci√≥n de eliminaci√≥n
    console.log('5Ô∏è‚É£ Probando notificaci√≥n: Eliminaci√≥n de postre...');
    const eliminacionNotification = await notificationService.notifyDeletion(
      'postre', 
      'Cheesecake de Fresa', 
      empleado.nombre,
      'Eliminado por empleado desde la app m√≥vil'
    );
    
    console.log('   Resultado:', eliminacionNotification.success ? '‚úÖ Enviada' : '‚ùå Error');
    console.log('');

    // 6. Probar notificaci√≥n de stock bajo
    console.log('6Ô∏è‚É£ Probando notificaci√≥n: Stock bajo...');
    const stockNotification = await notificationService.notifyLowStock({
      id: 3,
      nombre: 'Az√∫car',
      stock: 5
    }, empleado.nombre);
    
    console.log('   Resultado:', stockNotification.success ? '‚úÖ Enviada' : '‚ùå Error');
    console.log('');

    // 7. Mostrar resumen
    console.log('üìä === RESUMEN DE PRUEBAS ===');
    console.log('‚úÖ Todas las notificaciones han sido enviadas');
    console.log('üéØ Las notificaciones deben aparecer SOLO para administradores');
    console.log('üì± Revisa la pantalla de notificaciones en la app m√≥vil');
    console.log('');
    
    // 8. Mostrar estado del servicio
    const status = notificationService.getServiceStatus();
    console.log('üîß Estado del servicio:');
    console.log(`   - Modo: ${status.mode} (${status.isExpoGo ? 'Expo Go' : 'Development Build'})`);
    console.log(`   - Token: ${status.hasToken ? '‚úÖ Disponible' : '‚ùå No disponible'}`);
    console.log(`   - Usuario: ${status.userId} (${status.userRole})`);
    console.log(`   - Listeners: ${status.listeners}`);

  } catch (error) {
    console.error('‚ùå Error en pruebas:', error.message);
  }

  console.log('\nüèÅ === PRUEBAS COMPLETADAS ===');
  console.log('üí° Pr√≥ximos pasos:');
  console.log('   1. Abrir la app m√≥vil como administrador');
  console.log('   2. Ir a la pantalla de Notificaciones');
  console.log('   3. Verificar que aparezcan las notificaciones de prueba');
  console.log('   4. Realizar acciones como empleado y verificar las notificaciones');
}

// Ejecutar si se llama directamente
if (require.main === module) {
  testEmployeeNotifications().catch(console.error);
}

module.exports = { testEmployeeNotifications }; 