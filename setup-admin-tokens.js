const { notificationService } = require('./src/services/notificationService');

// Script para configurar tokens de administradores y resolver notificaciones push
console.log('üîß === CONFIGURACI√ìN DE TOKENS DE ADMINISTRADORES ===\n');

// PASO 1: CONFIGURACI√ìN MANUAL DE TOKENS (TEMPORAL)
// =====================================================

console.log('üìã INSTRUCCIONES PARA CONFIGURAR NOTIFICACIONES PUSH:\n');

console.log('1Ô∏è‚É£ OBTENER TOKEN DEL ADMINISTRADOR:');
console.log('   ‚Ä¢ El administrador debe abrir la app en su celular');
console.log('   ‚Ä¢ Al iniciar sesi√≥n, ver√° un popup con su token push');
console.log('   ‚Ä¢ Debe copiar ese token\n');

console.log('2Ô∏è‚É£ CONFIGURAR TOKEN EN EL C√ìDIGO:');
console.log('   ‚Ä¢ Abrir: pasteleria-app/src/services/notificationService.js');
console.log('   ‚Ä¢ Buscar la l√≠nea: const adminTokens = [');
console.log('   ‚Ä¢ Agregar el token del administrador en el array\n');

console.log('3Ô∏è‚É£ EJEMPLO DE CONFIGURACI√ìN:');
console.log('   const adminTokens = [');
console.log('     "ExponentPushToken[abc123def456...]", // Admin Mar√≠a');
console.log('     "ExponentPushToken[xyz789uvw012...]", // Admin Carlos');
console.log('   ];\n');

console.log('‚ö†Ô∏è IMPORTANTE: Este es un m√©todo temporal para testing.');
console.log('   En producci√≥n, los tokens se guardar√≠an autom√°ticamente en la base de datos.\n');

// FUNCI√ìN PARA PROBAR NOTIFICACIONES
async function testPushNotifications() {
  console.log('üß™ === PROBANDO NOTIFICACIONES PUSH ===\n');

  try {
    // Simular empleado enviando solicitud
    console.log('üë®‚Äçüíº Simulando empleado enviando solicitud...');
    
    const empleado = {
      id: 2,
      nombre: 'Juan Empleado',
      rol: 'empleado'
    };

    await notificationService.initialize(empleado);

    const solicitud = {
      title: 'üìã Solicitud de Prueba - Postre',
      message: `${empleado.nombre} solicita crear el postre "Tarta de Prueba". ¬øAprobar?`,
      module: 'postres',
      data: {
        action: 'crear',
        postre: 'Tarta de Prueba',
        usuario: empleado.nombre,
        rol: empleado.rol,
        requiresApproval: true
      }
    };

    const result = await notificationService.sendCustomNotification(solicitud, empleado.nombre);
    
    if (result.success) {
      console.log('‚úÖ Solicitud enviada exitosamente');
      console.log('üì± El administrador deber√≠a recibir una notificaci√≥n push');
    } else {
      console.log('‚ùå Error enviando solicitud:', result.error);
    }

  } catch (error) {
    console.error('‚ùå Error en la prueba:', error.message);
  }
}

// CONFIGURACI√ìN AUTOM√ÅTICA (AVANZADA)
async function setupAutomaticTokens() {
  console.log('ü§ñ === CONFIGURACI√ìN AUTOM√ÅTICA DE TOKENS ===\n');
  
  console.log('üí° Para configuraci√≥n autom√°tica, necesitas:');
  console.log('   1. Un servidor backend funcionando');
  console.log('   2. Base de datos configurada');
  console.log('   3. Endpoint /auth/push-token operativo\n');
  
  console.log('üîß Los tokens se guardar√°n autom√°ticamente cuando:');
  console.log('   ‚Ä¢ Los administradores abran la app');
  console.log('   ‚Ä¢ Se registren para push notifications');
  console.log('   ‚Ä¢ El servidor est√© disponible\n');
}

// DIAGN√ìSTICO DEL SISTEMA
async function diagnoseNotificationSystem() {
  console.log('üîç === DIAGN√ìSTICO DEL SISTEMA ===\n');

  try {
    // Verificar estado del servicio
    const status = notificationService.getServiceStatus();
    console.log('üìä Estado actual:');
    console.log(`   ‚Ä¢ Modo: ${status.mode} (${status.isExpoGo ? 'Expo Go' : 'Development Build'})`);
    console.log(`   ‚Ä¢ Token disponible: ${status.hasToken ? '‚úÖ' : '‚ùå'}`);
    console.log(`   ‚Ä¢ Usuario: ${status.userId} (${status.userRole})`);
    console.log(`   ‚Ä¢ Listeners activos: ${status.listeners}\n`);

    // Recomendaciones
    console.log('üí° RECOMENDACIONES:');
    
    if (status.isExpoGo) {
      console.log('   ‚ö†Ô∏è Detectado Expo Go:');
      console.log('     - Las notificaciones son solo locales');
      console.log('     - Para notificaciones entre celulares, usar Development Build');
      console.log('     - Comando: expo build:ios o expo build:android\n');
    } else {
      console.log('   ‚úÖ Detectado Development Build:');
      console.log('     - Push notifications habilitadas');
      console.log('     - Configurar tokens de administradores');
      console.log('     - Verificar conexi√≥n al servidor\n');
    }

    // Test de notificaci√≥n
    console.log('üß™ Enviando notificaci√≥n de prueba...');
    const testResult = await notificationService.sendTestNotification();
    
    if (testResult.success) {
      console.log(`‚úÖ Notificaci√≥n de prueba enviada (${testResult.mode})`);
    } else {
      console.log(`‚ùå Error en notificaci√≥n de prueba: ${testResult.error}`);
    }

  } catch (error) {
    console.error('‚ùå Error en diagn√≥stico:', error.message);
  }
}

// SOLUCI√ìN PASO A PASO
console.log('üöÄ === SOLUCI√ìN PASO A PASO ===\n');

console.log('PARA RESOLVER LAS NOTIFICACIONES ENTRE CELULARES:\n');

console.log('üì± CELULAR 1 (ADMINISTRADOR):');
console.log('   1. Instalar la app como Development Build (no Expo Go)');
console.log('   2. Hacer login como administrador');
console.log('   3. La app mostrar√° el token push en un popup');
console.log('   4. Copiar ese token\n');

console.log('üíª EN EL C√ìDIGO:');
console.log('   1. Abrir: pasteleria-app/src/services/notificationService.js');
console.log('   2. Encontrar: const adminTokens = []');
console.log('   3. Agregar el token del admin: ["ExponentPushToken[...]"]');
console.log('   4. Guardar el archivo\n');

console.log('üì± CELULAR 2 (EMPLEADO):');
console.log('   1. Hacer login como empleado');
console.log('   2. Intentar crear/editar/eliminar algo');
console.log('   3. Esto enviar√° una solicitud al administrador\n');

console.log('üîî VERIFICACI√ìN:');
console.log('   ‚Ä¢ El administrador debe recibir notificaci√≥n push');
console.log('   ‚Ä¢ Puede aprobar/rechazar desde su celular');
console.log('   ‚Ä¢ Las acciones se ejecutan autom√°ticamente\n');

// EJEMPLO DE TOKEN CONFIGURADO
console.log('üìã === EJEMPLO DE CONFIGURACI√ìN ===\n');

console.log('// En notificationService.js, l√≠nea ~370:');
console.log('const adminTokens = [');
console.log('  "ExponentPushToken[abc123def456ghi789jkl012]", // Mar√≠a Admin');
console.log('  "ExponentPushToken[mno345pqr678stu901vwx234]", // Carlos Admin');
console.log('];\n');

console.log('‚úÖ Con esta configuraci√≥n, cuando un empleado env√≠e una solicitud,');
console.log('   se enviar√° una notificaci√≥n push a ambos administradores.\n');

// EJECUTAR DIAGN√ìSTICO
diagnoseNotificationSystem();

module.exports = {
  testPushNotifications,
  setupAutomaticTokens,
  diagnoseNotificationSystem
}; 